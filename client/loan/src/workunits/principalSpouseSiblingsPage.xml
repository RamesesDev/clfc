<workunit>
    <invoker type="loan:principalSiblings" caption="Add Siblings Form" target="popup"/>
    
    <invoker type="formActions" caption="Add" mnemonic="c" action="add" />
    <invoker type="formActions" caption="Cancel" mnemonic="x" action="_close" immediate="true"/>
    <code lang="groovy">
        <![CDATA[
        import com.rameses.rcp.annotations.*;
        import com.rameses.rcp.common.*;
        import com.rameses.osiris2.client.*;
        
        public class PrincipalSpouseSiblingsPageController {
            @Service('LoanApplicationService')
            def svc;
            
            def entity=[:];
            def selectHandler;
            
            //****  Employment Information  ****//
            def principalSiblingsEmploymentHandler = [
                getRows: { 12 },
                getColumns: {
                    return [
                       new Column(name: 'employer', caption: 'Employer',         width: 110),                        
                       new Column(name: 'telno',    caption: 'Tel No.',          width: 70),
                       new Column(name: 'address',  caption: 'Address',          width: 100),
                       new Column(name: 'position', caption: 'Job Desc/Position',width: 110),
                       new Column(name: 'status',   caption: 'Status', width:90, maxWidth: 100),
                       new Column(name: 'years',    caption: 'Length of Svc',    width: 90),
                       new Column(name: 'salary',   caption: 'Compensation',     width: 100, maxWidth: 100),
                       new Column(name: 'others',   caption: 'Others',           width: 100),
                    ]
                },
                fetchList: { 
                    if(entity.principalSiblingsEmploymentList==null)
                        entity.principalSiblingsEmploymentList=[]; 
                    return entity.principalSiblingsEmploymentList;
                },
                createItem:{ [:] },
                
                onAddItem:{o-> 
                    entity.principalSiblingsEmploymentList.add(o);
                },
                onRemoveItem:{o->
                    if(MsgBox.confirm("Are you sure you want to remove the selected item?"))
                        entity.principalSiblingsEmploymentList.remove(o);
                }
            ] as SubListModel;
            
            def addPrincipalSiblingsEmployment(){
                if(!entity.name)throw new Exception("Please specify the name of the sibling(s) first.");
                if(!entity.age)throw new Exception("Please specify the age of the sibling(s).");
                if(!entity.address)throw new Exception("Please specify the address of the sibling(s).");
                return InvokerUtil.lookupOpener("loan:employment",[selectHandler:{ o ->
                    entity.principalSiblingsEmploymentList.add( o );
                    principalSiblingsEmploymentHandler.load();
                }]);
            }
            
            /*def editPrincipalSiblingsEmployment(){
            
            }*/
            
            /*def removePrincipalSiblingsEmployment(){
            
            }*/
            
            def principalSiblingsOtherSourcesOfIncomeHandler = [
                getRows: { 15 },
                getColumns: {
                    return [
                        new Column(name: 'kindOfBusiness',caption: 'Income Sources',    width: 150),
                        new Column(name: 'grossNetIncome',caption: 'Gross/Net Income ', width: 150),
                        new Column(name: 'remarks',       caption: 'Remarks',           width: 250),
                    ]
                },
                fetchList: { 
                    if(entity.principalSiblingsOtherSourcesOfIncomeList==null)
                        entity.principalSiblingsOtherSourcesOfIncomeList=[]; 
                    return entity.principalSiblingsOtherSourcesOfIncomeList;
                },
                onRemoveItem:{o->
                    if(MsgBox.confirm("Are you sure you want to remove the selected item?"))
                        entity.principalSiblingsOtherSourcesOfIncomeList.remove(o);
                }
            ] as SubListModel;
            
            def addPrincipalOtherSourcesOfIncome(){
                if(!entity.name)throw new Exception("Please specify the name of the sibling(s) first.");
                if(!entity.age)throw new Exception("Please specify the age of the sibling(s).");
                if(!entity.address)throw new Exception("Please specify the address of the sibling(s).");
                return InvokerUtil.lookupOpener("loan:otherSourcesOfIncome",[selectHandler:{ o ->
                    entity.principalSiblingsOtherSourcesOfIncomeList.add( o );
                    principalSiblingsOtherSourcesOfIncomeHandler.load();
                }]);
            }
            
            /*def editPrincipalSiblingsOtherSourcesOfIncome(){
                if(MsgBox.confirm("Are you sure you want to remove the selected item?"))
                    entity.principalSiblingsOtherSourcesOfIncomeList.remove(selected.principalSiblingsOtherSourcesOfIncomeList);
            }*/
            
            /*def removePrincipalSiblingsOtherSourcesOfIncome(){
                if(MsgBox.confirm("Are you sure you want to remove the selected item?"))
                    entity.principalSiblingsOtherSourcesOfIncomeList.remove(selected.principalSiblingsOtherSourcesOfIncomeList);
            }*/
            
            def add(){
                if( selectHandler ) selectHandler ( entity );
                return "_close";
            }
            
            
            
            /*=================================================================================================*/
            
            //void init(){
              //  if( !entity.employment ) entity.employment = empInfoDef.createModel();
                //employmentInfoControls = empInfoDef.getFormFields( entity.employment, 'entity.employment' );
            //}
            
            /*
            def birthdate = new java.text.SimpleDateFormat("yyyy-MM-dd").parse("1988-01-02");

            def parseDate = { obj, format ->
                if( obj instanceof Date ) return obj;
                return new java.text.SimpleDateFormat( format ).parse( obj.toString() );
            }

            def yearFt = new java.text.SimpleDateFormat("yyyy");

            def cYear = Integer.parseInt( yearFt.format( new Date() ) );
            def age = cYear - ( Integer.parseInt( yearFt.format( parseDate( "1988-01-02", "yyyy-MM-dd" ) ) ) );
            */
            
            /*=================================================================================================*/
        }
        ]]>
    </code>
    <pages>
        <page template="loan.ui.PrincipalSiblingsPage"/>
    </pages>
</workunit>
