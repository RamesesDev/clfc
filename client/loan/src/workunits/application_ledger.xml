<workunit>
    <invokers>
        <invoker type="application:formActions" caption="View Ledger" mnemonic="l" 
                 permission="application.viewLedger"
                 target="window" index="10" action="init" 
                 visibleWhen="#{!empty entity and !empty entity.ledger}"/>
        
        <invoker type="ledger:formActions" caption="Open" mnemonic="o" 
                 permission="application.viewLedger"
                 target="window" action="init" icon="images/open16.png"/>
        
        <invoker type="formActions" caption="Close" action="_close" icon="images/cancel16.png" 
                 visibleWhen="#{view!='details'}"/>
        
        <invoker type="formActions" caption="Back" icon="images/back16.png" mnemonic="b" 
                 action="back" visibleWhen="#{view!='main'}"/>
        
        <invoker type="formActions" caption="Print Ledger" mnemonic="p" action="print" icon="images/print16.png"
                 permission="application.printLedger" tooltip="Print this ledger"/>
        
        <invoker type="formActions" caption="Waive Ledger" mnemonic="w"
                 action="waiveLedger" permission="application.waiveLedger"/>
                 
        <invoker type="formActions" caption="View Details" mnemonic="d" action="viewDetails"
                 visibleWhen="#{view=='main'}"/>
                 
        <invoker type="formActions" caption="Capture Payment" mnemonic="c" action="capturePayment"
                 permission="application.capturePayment" visibleWhen="#{view!='main'}"/>
                 <!--visibleWhen="#{ledger.principalBalance &gt; 0 and entity.mode == 'CAPTURE' || entity.mode == 'ONLINE'}"/>-->
                 <!--visibleWhen="#{ledger.principalBalance &gt; 0 and entity.mode == 'CAPTURE'}"/>-->
        
        <invoker type="formActions" caption="Add Interest" mnemonic="a" action="addInterest" icon="images/add16.png"
                 permission="application.addInterest" tooltip="Add 7 Days of interest on this account"/>
                 
        <invoker type="formActions" caption="Search Payment" mnemonic="s" action="searchPayment" 
                 icon="images/search16.png" permission="application.searchLedgerPaymentDate" 
                 tooltip="Search Loan Ledger Payment Date" visibleWhen="#{view!='main'}"/>
        
        <invoker type="formActions" caption="Remove Payment" mnemonic="r" action="removePayment" 
                 icon="images/backout16.png" permission="application.removePayment" 
                 tooltip="Remove Loan Ledger Payment Date" visibleWhen="#{view!='main'}"/>
                 
        <invoker type="formPrintActions" caption="Back" tooltip="Back"
                 icon="images/back16.png" action="viewDetails" mnemonic="p"/>
                 
        <invoker type="formActions" caption="Refresh" icon="images/refresh16.png" 
                 mnemonic="r" action="loadLedgerInfo"/>
    </invokers>
    <code>
        <![CDATA[
        import com.rameses.rcp.annotations.*;
        import com.rameses.rcp.common.*;
        import com.rameses.osiris2.client.*;
        import com.rameses.osiris2.reports.*;
        import com.rameses.util.*;
        import java.lang.*;
        import java.io.*;
        import java.sql.Timestamp;
        
        public class LoanAppLedgerController{
            @Service('LoanLedgerService')
            def svc;
        
            @FormId
            @FormTitle
            def formTitle;
            
            @Binding
            def binding;
        
            def selectHandler;
            def info;
            def ledger;
            def details;
            
            def view = 'main';
            
            void init(){
                if( !entity || !entity.objid ) 
                    throw new RuntimeException('Please select an application.');

                formTitle = 'Ledger Info - ' + entity.appno;
                loadLedgerInfo();
            }
            
            void loadLedgerInfo() {
                ledger = svc.read( [objid: entity.objid] );                
                initLedger();
            }
            
            void initLedger() {
                if( ledger.dtcreated )    ledger.dtcreated = parseDate( ledger.dtcreated );
                if( ledger.maturityDate ) ledger.maturityDate = parseDate( ledger.maturityDate );
                if( ledger.startDate )    ledger.startDate = parseDate( ledger.startDate + ' 00:00:00' );
                if( ledger.lastDatePaid ) ledger.lastDatePaid = parseDate( ledger.lastDatePaid + ' 00:00:00' );
                
                ledger.interest = ledger.interestrate*100.00;
            }
            
            def parseDate( date ) {
                if( date.length() == 19 )
                    return java.sql.Timestamp.valueOf( date );
                
                return java.sql.Date.valueOf( date );
            }
            
            def listHandler = [
                getRows: { 50 },
                fetchList:{ 
                    it.objid = entity.objid;
                    return svc.getDetails(it)
                },
                getColumns: {
                    return[
                        new Column(name:'date',                 caption:'Schedule' ,         width:95),
                        new Column(name:'principal',            caption:'Principal Payment', width:110),
                        new Column(name:'principal_balance',    caption:'Partial Balance',   width:95),
                        new Column(name:'interest',             caption:'Interest Paid',     width:90),
                        new Column(name:'absent_penalty',       caption:'Absent',            width:75),
                        new Column(name:'underpayment_penalty', caption:'Underpayment',      width:96),
                        new Column(name:'pastdue',              caption:'Overdue',           width:60),
                        new Column(name:'payment',              caption:'Total Payment',     width:97),
                        new Column(name:'refno',                caption:'OR/Ref. No.',       width:75),
                        new Column(name:'paymentdate',          caption:'Payment Date',      width:100),
                    ];
                }
            ]as PageListModel;
            
            def viewDetails(){
                return (view = 'details');
            }
            
            def back() {
                loadLedgerInfo();
                return (view = 'main');
            }
            
            def capturePayment(){
                return InvokerUtil.lookupOpener('application:capturePayment',[
                    appid: entity.objid,
                    handler:{
                        loadLedgerInfo();
                        listHandler.refresh();
                    }
                ]);
            }            
            
            def waiveLedger(){
                return InvokerUtil.lookupOpener('application:waiveLedger',[
                    appid: entity.objid,
                    borrowername: entity.fullborrowername,
                    handler:{ ledger ->
                        this.ledger = ledger;
                        initLedger();
                        binding.refresh();
                    }
                ]);
            }
            
            def addInterest(){
                if(MsgBox.confirm("Adding an interest on this account may differ from its" + 
                                   "\noriginal Actual/Loan Balance. proceed?")){
                    return InvokerUtil.lookupOpener('application:addInterest',[
                        appid: entity.objid,
                        handler:{
                            loadLedgerInfo();
                            listHandler.refresh();
                        }
                    ]);
                }
            }
            
            def searchPayment(){
                return InvokerUtil.lookupOpener("application:searchPaymentDate",[:]);
            }
            
            def removePayment(){
                return InvokerUtil.lookupOpener("application:removePaymentDate",[:]);
            }
            
            /*def getTotalCharges() {
                if( !accts ) return 0.00;

                def ch = accts*.amount.sum();
                def och = otherCharges*.amount.sum();

                return (ch? ch : 0.00) + (och? och : 0.00);
            }*/
            /*                       */
            
            void print(){
                MsgBox.alert("Now Printing..." + "\nLoan Information"+"\nApplication No. " +entity.appno+
                        "\nFirst Name: " +entity.borrower.firstname+ "\nLast Name: " +entity.borrower.lastname+
                        //"\nAddress: " +data.+
                        //"\nJoint Borrower(s): " +entity.fullborrowername+
                        //"\nJoint Borrower(s): " +entity.jointBorrowerList+
                        "\nRoute Code: " +entity.routecode+ "\nRoute Description: " +entity.routedescription+ "\n"+
                        "\nLedger Details" + "\nActual Loan Balance: " +ledger.loanBalance+
                        "\nPrincipal Balance: " +ledger.principalBalance+ "\nTotal Principal Payment: " +ledger.totalPrincipalPaid+
                        //"\nAdded Interest " +addedInterest+ "\nTotal Interest Payment: " +ledger.totalInterestPaid+
                        "\nTotal Penalty Payment: " +ledger.totalPenaltyPaid+ "\nTotal Payment: " +ledger.totalPaid+
                        "\nLast Payment Date: " +ledger.lastDatePaid+ "\nTotal Absences: " +ledger.totalAbsent+
                        "\nMode of Payment: " +ledger.totalAbsent+ 
                        "\nLoan Information...Check No.: " +ledger.checkInfo.bankname+ " - " +ledger.checkno+
                        "\nAmount Loaned: " +ledger.loanAmount+ "\nDate Granted: " +ledger.dtcreated+
                        "\nMaturity Date: " +ledger.maturityDate+ "\nInterest Rate: " +ledger.interestrate+
                        //"\nTerm: " +ledger.term+ "\nTotal Charges: " +totalCharges+ "\nDaily Payment: " +ledger.dailyPayment+
                        "\nCollateral(s)" + "\nAppliance(s): " +entity.appliancelist+
                        "\nVehicle(s): " +entity.vehiclelist+
                        "\nProperty(ies): " +entity.propertylist
                );
                        
                setPrintOut();
            }
            
             //--- Report Support -----//
            def itemReport = [  "Loan Ledger" ]            
            def report;            
            def printOut;
            def mode = "printPage";
            def entity;
            
            void setPrintOut( po ){
                this.printOut = po;
                initReportModel();
                
                binding.fireNavigation( (mode='printPage') );
            }
            
            void initReportModel(){
                if( !printOut ) printOut = itemReport[0];
                report = [
                    getReportName:{
                        if( "Loan Ledger".equals(printOut) )
                            return 'loan/printout/Ledger.jasper';
                    },
                    getReportData:{ //return collectionSheet.list;
                        //it.objid = entity.objid;
                        //return svc.getDetails(it)
                        //def cv = checkSvc.openByRefid( [refid: it.objid] );
                        
                        def data = [ entity:entity, ledger:ledger ];
                        
                        data.entity.appno = data.entity.appno;
                        data.borrowername = data.entity.fullborrowername;
                        //data.borrowername = data.entity.borrower.lastname +", " + data.entity.borrower.firstname +" ( " +(data.entity.borrower.middlename==null? '-' : data.entity.borrower.middlename)+ " )";
                        
                        def addr = data.entity.borrower.currentaddress;
                        if( addr ){
                            data.address = addr.address1 + (addr.address2? ' ' + addr.address2 : '') +
                                           (addr.city? ' ' + addr.city : '') +
                                           (addr.zipcode? ' ' + addr.zipcode : '') +
                                           (addr.province? ' ' + addr.province : '') +
                                           (addr.country? ' ' + addr.country : '');
                        }
                        else {
                            data.address = '';
                        }
                        
                        if( data.entity.routecode ==null )
                            data.entity.routecode = '';
                        else data.entity.routecode = data.entity.routecode;
                        if( data.entity.routedescription ==null )
                            data.entity.routedescription = '';
                        else data.entity.routedescription = data.entity.routedescription;
                        data.entity.route = data.entity.routecode + " - " + data.entity.routedescription;
                        
                        data.entity.propertylist.each{
                            if( it.area==null )
                                it.area = new BigDecimal( 0.00 );
                            else it.area = new BigDecimal( it.area );

                            if( it.appraisedvalue==null )
                                it.appraisedvalue = new BigDecimal( 0.00 );
                            else it.appraisedvalue = new BigDecimal( it.appraisedvalue );

                            if( it.zonalvalue==null )
                                it.zonalvalue = new BigDecimal( 0.00 );
                            else it.zonalvalue = new BigDecimal( it.zonalvalue );
                        };
                        
                        data.entity.vehiclelist.each{
                            if( it.appraisedvalue==null )
                                it.appraisedvalue = new BigDecimal( 0.00 );
                            else it.appraisedvalue = new BigDecimal( it.appraisedvalue );   
                        };

                        data.entity.appliancelist.each{
                            if( it.appraisedvalue==null ){
                                it.appraisedvalue = new BigDecimal( 0.00 );    
                                //it.totalCav = new BigDecimal(0.00);
                            }else it.appraisedvalue = new BigDecimal( it.appraisedvalue );
                                //it.totalCav = it.appraisedvalue(it.appraisedvalue);
                        };
                        
                        /*
                        if( !data.ledger.checkInfo.bankname )
                            data.ledger.checkInfo.bankname = '';
                        else data.ledger.checkInfo.bankname = data.ledger.checkInfo.bankname;
                        if( !data.ledger.checkno )
                            data.ledger.checkno = '';
                        else data.ledger.checkno = data.ledger.checkno;
                        data.bank = data.ledger.checkInfo.bankname + " - " + data.ledger.checkno;
                        */
                        
                        if (data.ledger.loanAmount !=null) data.ledger.loanAmount =  data.ledger.loanAmount as BigDecimal;
                        if (data.ledger.dailyPayment !=null) data.ledger.dailyPayment =  data.ledger.dailyPayment as BigDecimal;
                        if (data.ledger.interestrate !=null) data.ledger.interestrate =  data.ledger.interestrate as BigDecimal;
                        if (data.ledger.term !=null) data.ledger.term = data.ledger.term as BigDecimal;
                        if (data.ledger.totalPaid !=null) data.ledger.totalPaid =  data.ledger.totalPaid as BigDecimal;
                        if (data.ledger.totalPenaltyPaid !=null) data.ledger.totalPenaltyPaid =  data.ledger.totalPenaltyPaid as BigDecimal;
                        if (data.ledger.totalInterestPaid !=null) data.ledger.totalInterestPaid =  data.ledger.totalInterestPaid as BigDecimal;
                        if (data.ledger.totalPrincipalPaid !=null) data.ledger.totalPrincipalPaid =  data.ledger.totalPrincipalPaid as BigDecimal;
                        if (data.ledger.principalBalance !=null) data.ledger.principalBalance =  data.ledger.principalBalance as BigDecimal;
                        if (data.ledger.principalBalance !=null) data.ledger.principalBalance =  data.ledger.principalBalance as BigDecimal;
                        if (data.ledger.mode !=null) data.ledger.mode = data.ledger.mode.toUpperCase() +" PAYMENT";
                        
                        return data;
                    },
                    getSubReports:{
                        if( "Loan Ledger".equals(printOut) ){
                            return[
                                new SubReport("BUSINESS", "loan/printout/subReportPrincipalBusiness.jasper"),
                                new SubReport("COLLATERAL_VEHICLES", "loan/printout/subReportVehicles.jasper"),
                                new SubReport("COLLATERAL_PROPERTY", "loan/printout/subReportRealProperty.jasper"),
                                new SubReport("COLLATERAL_APPLIANCE", "loan/printout/subReportAppliance.jasper"),
                                new SubReport("COLLATERAL_OTHERS", "loan/printout/subReportOtherCollateral.jasper")
                            ];
                       }
                    },
                    getParameters:{
                        return[
                            BRANCH_NAME: OsirisContext.env.CLIENT.name,
                            PRINTDATE: new Date(),
                            User: OsirisContext.env.USERINFO.firstname + ' ' + OsirisContext.env.USERINFO.lastname
                        ]
                    }
                ] as ReportModel;
                
                report.viewReport();
            }
        }
        ]]>
    </code>
    <pages>
        <page name="main" template="loan.ui.ledger.LedgerPage2"/>
        <page name="details" template="loan.ui.ledger.LedgerItemPage"/>
        <page name="printPage" template="loan.ui.LoanAppReport"/>
    </pages>
</workunit>