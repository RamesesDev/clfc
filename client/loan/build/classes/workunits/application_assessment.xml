<workunit>
    <invokers>
        <invoker type="application:approved_action" caption="Submit For Release" action="init" mnemonic="s" index="10"/>
        
        <invoker type="formActions" caption="Back"   action="_close" mnemonic="c" icon="images/back16.png"/>
        <invoker type="formActions" caption="Next"   action="next"   mnemonic="n" icon="images/next16.png" 
                 visibleWhen="#{mode=='amountOption'}" tooltip="Proceed?"/>
        <invoker type="formActions" caption="Submit" action="submit" mnemonic="s" visibleWhen="#{mode=='charges'}" 
                 tooltip="Submit for Releasing" icon="images/submit16.png"/>
        <invoker type="formPrintActions" caption="Close" icon="images/exit16.png" action="_close" mnemonic="c"/>
    </invokers>
    <code>
        <![CDATA[
        import com.rameses.rcp.annotations.*;
        import com.rameses.rcp.common.*;
        import com.rameses.util.*;
        import com.rameses.osiris2.client.*;
        import com.rameses.osiris2.reports.*;
        import com.rameses.common.*;
        import java.util.regex.*;
        import java.sql.Timestamp;
        import java.lang.*;
        
        class ApplicationForReleaseController{
            @Service("LoanApplicationService")
            def appSvc;
            
            @Service("CheckVoucherService")
            def checkSvc;
            
            @Binding
            def binding;
            
            //-- passed by the caller
            def application;
            def selectHandler;
            
            def accts = [];
            def otherCharges;
            def selectedAmount;
            
            def assessment;
            def totalCharge = 0.00;
            def selectedOtherCharge;
            
            def mode;
            def opener;
            def sForm;
            
            def entity = [approvalType:"A"];
            
            def init(){
                //mode="amountOption";
            
                //mode="showCharges";
                //if( application.loaninfo.approvalType=="conditional" ){
                    //return (mode="amountOption");
                //}
                
                //calculateCharges();
                //return (mode="charges");
                
                //Checking for Approval Date and Expiry Date
                if( application.approvedate.compareTo(application.expirydate) > 0 ){
                    throw new Exception("Approval Date on this account has already been expired.");
                }
                //if( application.loaninfo.offeredamount ){
                    //return (mode="amountOption");
                //}else if( !application.loaninfo.offeredamount ){

                    mode="showCharges";

                    calculateCharges();
                    return (mode="charges");
                //}
            }
            
            def listHandler=[
                    getColumns:{
                    return[ new Column(name:'amount',  caption:"Amount",  width: 100, format:"#,##0.00", alignment:"right"),          
                            new Column(name:'remarks', caption:"Remarks", width: 570),
                     ]
                },
                fetchList:{o-> 
                    return application.loaninfo.amountapprovedOptions
                },
                getRows:{
                    return 9;
                },
            ]as SubListModel;
            
            def next(){
                 application.loaninfo.amountapproved = selectedAmount.amount;
                 application.putAll( appSvc.save(application) );
                 calculateCharges();                 
                 
                 return (mode="charges");
            }
        
            void calculateCharges() {
                assessment = appSvc.assess( [objid: application.objid] );
                if( assessment.otherCharges == null ) assessment.otherCharges = [];
                
                otherCharges = assessment.otherCharges;
                accts = assessment.accounts;
            }
            
            def getTotalCharges() {
                if( !assessment ) return 0.00;
                
                def ch = accts*.amount.sum();
                def och = otherCharges*.amount.sum();
                
                return (ch? ch : 0.00) + (och? och : 0.00);
            }
            
            def agreementHandler={ appinfoList ->
                application.appinfoList = appinfoList;
                
                def param = [application: application, assessment: assessment];
                
                application = appSvc.submitForRelease( param );
                
                initReportModel()
                binding.fireNavigation( (mode='printPage') );
             };
             
            def submit(){
                return InvokerUtil.lookupOpener("loan:agreement",[selectHandler:agreementHandler]);
            }
            
            def chargeHandler = [
                getRows: { 5 },
                getColumns: {
                    return [
                        new Column(name:'code',   caption:'Account Code',  width: 100),
                        new Column(name:'title',  caption:'Account Title', width: 300),
                        new Column(name:'amount', caption:'Amount', type: 'decimal', format: '#,##0.00;(#,##0.00)'),
                    ];
                },
                fetchList: { return accts; }
            
            ] as SubListModel;
            
            def otherChargeHandler = [
                getRows: { 5 },
                getColumns: {
                    return [
                        new Column(name:'code',   caption:'Account Code',  width: 100),
                        new Column(name:'title',  caption:'Account Title', width: 300),
                        new Column(name:'amount', caption:'Amount', type: 'decimal', format: '#,##0.00;(#,##0.00)'),
                    ];
                },
                fetchList: { return otherCharges; }
            
            ] as SubListModel;
            
            def addCharge() {
                return InvokerUtil.lookupOpener('application:assessment_charge',[
                    selectHandler: { charge ->
                        def acct = charge.account;
                        
                        if( acct ){
                            acct.amount = -(charge.amount);
                            otherCharges.add( acct );
                            assessment.netAmount += acct.amount;

                            otherChargeHandler.load();
                            binding.refresh('assessment.netAmount|totalCharges');
                        }else //if( acct == selectedOtherCharge )
                            throw new Exception("Account Title/Code has already been in the list.");
                    }
                ]);
            }
            
            void removeCharge() {
                if( !selectedOtherCharge ) return;
                
                assessment.netAmount -= selectedOtherCharge.amount;
                otherCharges.remove( selectedOtherCharge );
                
                otherChargeHandler.load();
                binding.refresh('assessment.netAmount|totalCharges');
            }
            
            //--- Report Support -----//
            def itemReport = [  "Loan Disclosure", "Loan Release Voucher", "Cash Voucher", 
                                "Affidavit Of Ownership", "Deed Of Voluntary Deposit",
                                "Promissory Note", "Deed of Chattel Mortgage Page1", 
                                "Deed of Chattel Mortgage Page2", "Deed of Chattel Mortgage Page3",
                                "Deed of Chattel Mortgage Page4"
                             ]
            def report;            
            def printOut;

            void setPrintOut( po ){
                this.printOut = po;
                initReportModel();
            }
            
            void initReportModel(){
                if( !printOut ) printOut = itemReport[0];
                
                report = [
                    getReportName: {
                        if( "Loan Disclosure".equals(printOut) )
                            return 'loan/loandocs/LoanDisclosureStatement (copy).jasper';
                        else if( "Loan Release Voucher".equals(printOut) )
                            return 'loan/loandocs/LoanReleaseVoucher (Copy).jasper';
                        else if( "Affidavit Of Ownership".equals(printOut) )
                            return 'loan/loandocs/AffidavitOfOwnership.jasper';
                        else if( "Deed Of Voluntary Deposit".equals(printOut) )
                            return 'loan/loandocs/DeedOfVoluntaryDeposit.jasper';
                        else if( "Promissory Note".equals(printOut) )
                            return 'loan/loandocs/PromissoryNote.jasper';
                        else if( "Deed of Chattel Mortgage Page1".equals(printOut) )
                            return 'loan/loandocs/DeedOfChattelMortgagePage1.jasper';
                        else if( "Deed of Chattel Mortgage Page2".equals(printOut) )
                            return 'loan/loandocs/DeedOfChattelMortgagePage2.jasper';
                        else if( "Deed of Chattel Mortgage Page3".equals(printOut) )
                            return 'loan/loandocs/DeedOfChattelMortgagePage3.jasper';        
                        else if( "Deed of Chattel Mortgage Page4".equals(printOut) )
                            return 'loan/loandocs/DeedOfChattelMortgagePage4.jasper';
                        else
                            return 'loan/loandocs/CashVoucher (copy).jasper';
                    },
                    getReportData: {
                        def data = [:];
                        
                        /*****For Loan Disclosure , Loan Release Voucher & Cash Voucher*****/
                        data.name = [application.borrower.firstname + ' ' + application.borrower.lastname];
                        data.name2 = [application.borrower.firstname + ' ' + application.borrower.lastname];
                        application.jointBorrowerList?.each {
                            data.name << it.firstname + ' ' + it.lastname;
                            data.name2 << it.firstname + ' ' + it.lastname;
                        }
                        data.name = data.name.join(' and ');
                        data.name2 = data.name2.join(' or ');
                        def addr = application.borrower.currentaddress;
                        if( addr ){
                            data.address = addr.address1 + (addr.address2? ' ' + addr.address2 : '') +
                                           (addr.city? ' ' + addr.city : '') +
                                           (addr.zipcode? ' ' + addr.zipcode : '') +
                                           (addr.province? ' ' + addr.province : '') +
                                           (addr.country? ' ' + addr.country : '');
                        }
                        else {
                            data.address = '';
                        }
                        
                        data.appno = application.appno;
                        data.contactno = application.borrower.contactno;
                        data.phone = application.borrower.phone;
                        data.amountapproved = application.loaninfo.amountapproved as BigDecimal;       
                        data.interestrate = application.loaninfo.producttype.interestrate as BigDecimal;
                        data.underpaymentpenalty = application.loaninfo.producttype.underpaymentpenalty as BigDecimal;
                        data.pastduerate = application.loaninfo.producttype.pastduerate as BigDecimal;
                        
                        /*** Displaying of Loan Charges/Non Finance Charges ***/
                        def charges;
                        data.charges = accts;
                        data.otherCharges = accts;
                        data.notarial = accts.find{ it.title == 'NOTARIAL FEE' }?.amount;
                        data.docstamp = accts.find{ it.title == 'DOCUMENTARY STAMP FEE' }?.amount;
                        data.chatrealreg = accts.find{ it.title == 'CHAT/REAL REGISTRATION' }?.amount;
                        data.affidavit = accts.find{ it.title == 'AFFIDAVIT' }?.amount;
                        data.loanRenewal = accts.find{ it.title == 'LOAN RENEWAL' }?.amount;
                        
                        /*** Other Loan Charges/Non Finance Charges ***/
                        data.others = accts.find{ it.title == 'OTHERS' }?.amount;
                        data.loadingGlobe = accts.find{ it.title == 'LOADING GLOBE' }?.amount;
                        data.loadingSun = accts.find{ it.title == 'LOADING SUN' }?.amount;
                        data.loanReceivable = accts.find{ it.title == 'LOAN RECEIVABLE' }?.amount;
                        data.currentInterest = accts.find{ it.title == 'CURRENT INTEREST' }?.amount;
                        data.currentPrincipal = accts.find{ it.title == 'CURRENT PRINCIPAL' }?.amount;
                        data.pastDueInterest = accts.find{ it.title == 'PAST DUE INTEREST' }?.amount;
                        data.pastDuePrincipal = accts.find{ it.title == 'PAST DUE PRINCIPAL' }?.amount;
                        data.loanSurcharge = accts.find{ it.title == 'LOAN SURCHARGE' }?.amount;
                        data.loanInterest = accts.find{ it.title == 'LOAN INTEREST' }?.amount;
                        
                        /*MsgBox.alert("Now Printing..." + "\nNotarial: " +data.notarial
                                     +"\nDoc Stamp: " +data.docstamp
                                     +"\nChat/Real Reg: " +data.chatrealreg
                                     +"\nAffidavit " +data.affidavit
                                     +"\nOthers: " +data.others
                                     +"\nLoading Globe: " +data.loadingGlobe
                                     +"\nLoading Sun: " +data.loadingSun
                                     +"\nLoan Renewal: "+data.loanRenewal
                                     +"\nLoan Receivable: " +data.loanReceivable
                                     +"\nCurrent Interest: " +data.currentInterest
                                     +"\nCurrent Principal: " +data.currentPrincipal
                                     +"\nPast Due Interest: " +data.pastDueInterest
                                     +"\nPast Due Principal: " +data.pastDuePrincipal
                                     +"\nLoan Surcharge: " +data.loanSurcharge
                                     +"\nLoan Interest: " +data.loanInterest
                                     );*/
                                     
                        data.totalCharges = (data.notarial==null? 0 : data.notarial)+(data.docstamp==null? 0 : data.docstamp)+(data.chatrealreg==null? 0 : data.chatrealreg)+(data.affidavit==null? 0 : data.affidavit)+(data.others==null? 0 : data.others)+(data.loadingGlobe==null? 0 : data.loadingGlobe)+(data.loadingSun==null? 0 : data.loadingSun)+(data.loanRenewal==null? 0 : data.loanRenewal)+(data.loanReceivable==null? 0 : data.loanReceivable)+(data.currentInterest==null? 0 : data.currentInterest)+(data.currentPrincipal==null? 0 : data.currentPrincipal)+(data.pastDueInterest==null? 0 : data.pastDueInterest)+(data.pastDuePrincipal==null? 0 : data.pastDuePrincipal)+(data.loanSurcharge==null? 0 : data.loanSurcharge)+(data.loanInterest==null? 0 : data.loanInterest);
                        println data.totalCharges;
                        
                        data.netrelease = data.amountapproved + data.totalCharges;
                        
                        /*****Conversion Number to words****/
                        data.amount = NumberToWords.instance.convert(data.netrelease).toUpperCase() + " pesos and 00/100 only";
                        /***********************************************/
                        
                        /***      ledger data      ***/
                        /*if( !application.ledger.startDate || application.ledger.startDate == null )
                            data.startDate = '';
                        else data.startDate = application.ledger.startDate;
                        if( !application.ledger.maturityDate || application.ledger.maturityDate == null )
                            data.maturityDate = '';
                        else data.maturityDate = application.ledger.maturityDate;
                        if( !application.ledger.dailyPayment || application.ledger.dailyPayment == null )
                            data.dailyPayment = new BigDecimal(0.00);
                        else data.dailyPayment = new BigDecimal(application.ledger.dailyPayment);
                        if( !application.ledger.term || application.ledger.term == null )
                            data.term = new BigDecimal(0.00);
                        else data.term = new BigDecimal(application.ledger.term);
                        data.lenTerm = data.term / 30.00;
                        if( !application.ledger.bankname || application.ledger.bankname == null)
                            data.bankname='';
                        else data.bankname = application.ledger.bankname;
                        if( !application.ledger.checkno || application.ledger.checkno == null )
                            data.checkno='';
                        else data.checkno = application.ledger.checkno;
                        */
                        //data.refno = refs;
                        /*  =============================  */
                        
                        return data;
                    },
                    getParameters:{
                        return[
                            //BRANCH_NAME: OsirisContext.env.CLIENT.name,
                            PRINTDATE: new Date(),
                            User: OsirisContext.env.USERINFO.firstname + ' ' + OsirisContext.env.USERINFO.lastname
                        ]
                    }
                ]as ReportModel;
                
                report.viewReport();
            }
        }
        ]]>
    </code>
    <pages>
        <page name="charges" template="loan.assessment.ui.LoanAssessmentPage"/>
        <page name="amountOption" template="loan.assessment.ui.ApprovedAmountPage"/>
        <!--<page name="amountOption" template="loan.assessment.ui.ApprovedAmountPage_2"/>-->
        <page name="printPage" template="loan.ui.LoanAppReport"/>
    </pages>
</workunit>