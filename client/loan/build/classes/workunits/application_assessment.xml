<workunit>
    <invokers>
        <invoker type="application:approved_action" caption="Submit For Release" action="init" mnemonic="s" index="10"/>
        
        <invoker type="formActions" caption="Back"   action="_close" mnemonic="c" icon="images/back16.png"/>
        <invoker type="formActions" caption="Next"   action="next"   mnemonic="n" icon="images/next16.png" visibleWhen="#{mode=='amountOption'}" tooltip="Proceed?"/>
        <invoker type="formActions" caption="Submit" action="submit" mnemonic="s" visibleWhen="#{mode=='charges'}" tooltip="Submit for Releasing"/>
        
        <invoker type="formPrintActions" caption="Close" icon="images/exit16.png" action="_close" mnemonic="c"/>
    </invokers>
    <code>
        <![CDATA[
        import com.rameses.rcp.annotations.*;
        import com.rameses.rcp.common.*;
        import com.rameses.osiris2.client.*;
        import com.rameses.osiris2.reports.*;
        
        class ApplicationForReleaseController{        
            @Service("LoanApplicationService")
            def appSvc;
            
            @Service("CheckVoucherService")
            def checkSvc;
            
            @Script('ReleaseVoucherScript')
            def printSupport;
            
            @Binding
            def binding;
            
            //-- passed by the caller
            def application;
            def selectHandler;
            
            def accts = [];
            def otherCharges;
            def selectedAmount;
            
            def assessment;
            def totalCharge = 0.00;
            def selectedOtherCharge;
            
            def mode;
            def opener;
            def sForm;
            
            def entity = [approvalType:"A"];
            
            def init(){
                //mode="amountOption";
            
                //mode="showCharges";
                //if( application.loaninfo.approvalType=="conditional" ){
                    //return (mode="amountOption");
                //}
                
                //calculateCharges();
                //return (mode="charges");
                
                
                mode="showCharges";
                if( application.loaninfo.approvalType=="conditional" ){
                    return (mode="amountOption");
                }
                calculateCharges();
                return (mode="charges");
                
            }
            
            def listHandler=[
                    getColumns:{
                    return[ new Column(name:'amount',  caption:"Amount",  width: 100, format:"#,##0.00", alignment:"right"),          
                            new Column(name:'remarks', caption:"Remarks", width: 570),
                     ]
                },
                fetchList:{o-> 
                    return application.loaninfo.amountapprovedOptions
                },
                getRows:{
                    return 9;
                },
            ]as SubListModel;
            
            def next(){
                 application.loaninfo.amountapproved = selectedAmount.amount;
                 application.putAll( appSvc.save(application) );
                 calculateCharges();                 
                 
                 return (mode="charges");
            }
        
            void calculateCharges() {
                assessment = appSvc.assess( [objid: application.objid] );
                if( assessment.otherCharges == null ) assessment.otherCharges = [];
                
                otherCharges = assessment.otherCharges;
                accts = assessment.accounts;
            }
            
            def getTotalCharges() {
                if( !assessment ) return 0.00;
                
                def ch = accts*.amount.sum();
                def och = otherCharges*.amount.sum();
                
                return (ch? ch : 0.00) + (och? och : 0.00);
            }
            
            def agreementHandler={ appinfoList ->
                application.appinfoList = appinfoList;
                
                def param = [application: application, assessment: assessment];
                
                application = appSvc.submitForRelease( param );
                
                initReportModel()
                binding.fireNavigation( (mode='printPage') );
             };
             
            def submit(){
                return InvokerUtil.lookupOpener("loan:agreement",[selectHandler:agreementHandler]);
            }
            
            def chargeHandler = [
                getRows: { 5 },
                getColumns: {
                    return [
                        new Column(name:'code',   caption:'Account Code',  width: 100),
                        new Column(name:'title',  caption:'Account Title', width: 300),
                        new Column(name:'amount', caption:'Amount', type: 'decimal', format: '#,##0.00;(#,##0.00)'),
                    ];
                },
                fetchList: { return accts; }
            
            ] as SubListModel;
            
            def otherChargeHandler = [
                getRows: { 5 },
                getColumns: {
                    return [
                        new Column(name:'code',   caption:'Account Code',  width: 100),
                        new Column(name:'title',  caption:'Account Title', width: 300),
                        new Column(name:'amount', caption:'Amount', type: 'decimal', format: '#,##0.00;(#,##0.00)'),
                    ];
                },
                fetchList: { return otherCharges; }
            
            ] as SubListModel;
            
            def addCharge() {
                return InvokerUtil.lookupOpener('application:assessment_charge',[
                    selectHandler: { charge ->
                        def acct = charge.account;
                        acct.amount = -(charge.amount);
                        otherCharges.add( acct );
                        assessment.netAmount += acct.amount;
                                                
                        otherChargeHandler.load();
                        binding.refresh('assessment.netAmount|totalCharges');
                    }
                ]);
            }
            
            void removeCharge() {
                if( !selectedOtherCharge ) return;
                
                assessment.netAmount -= selectedOtherCharge.amount;
                otherCharges.remove( selectedOtherCharge );
                
                otherChargeHandler.load();
                binding.refresh('assessment.netAmount|totalCharges');
            }
            
            //--- Report Support -----//
            def itemReport = [  "Loan Disclosure", "Loan Release Voucher", "Cash Voucher", 
                                "Affidavit Of Ownership", "Deed Of Voluntary Deposit",
                                "Promissory Note", "Deed of Chattel Mortgage Page1", 
                                "Deed of Chattel Mortgage Page2", "Deed of Chattel Mortgage Page3",
                                "Deed of Chattel Mortgage Page4"
                             ]
            def report;            
            def printOut;

            void setPrintOut( po ) {
                this.printOut = po;
                initReportModel();
            }
            
            void initReportModel() {
                if( !printOut ) printOut = itemReport[0];
                
                report = [
                    getReportName: {
                        if( "Loan Disclosure".equals(printOut) )
                            return 'loan/loandocs/LoanDisclosureStatement.jasper';
                        else if( "Loan Release Voucher".equals(printOut) )
                            return 'loan/loandocs/LoanReleaseVoucher.jasper';
                        else if( "Affidavit Of Ownership".equals(printOut) )
                            return 'loan/loandocs/AffidavitOfOwnership.jasper';
                        else if( "Deed Of Voluntary Deposit".equals(printOut) )
                            return 'loan/loandocs/DeedOfVoluntaryDeposit.jasper';
                        else if( "Promissory Note".equals(printOut) )
                            return 'loan/loandocs/PromissoryNote.jasper';
                        else if( "Deed of Chattel Mortgage Page1".equals(printOut) )
                            return 'loan/loandocs/DeedOfChattelMortgagePage1.jasper';
                        else if( "Deed of Chattel Mortgage Page2".equals(printOut) )
                            return 'loan/loandocs/DeedOfChattelMortgagePage2.jasper';
                        else if( "Deed of Chattel Mortgage Page3".equals(printOut) )
                            return 'loan/loandocs/DeedOfChattelMortgagePage3.jasper';        
                        else if( "Deed of Chattel Mortgage Page4".equals(printOut) )
                            return 'loan/loandocs/DeedOfChattelMortgagePage4.jasper';
                        else
                            return 'loan/loandocs/CashVoucher.jasper';
                    },
                    getReportData: {
                        def data = [:];
                        data.name = [application.borrower.firstname + ' ' + application.borrower.lastname];
                        data.name2 = [application.borrower.firstname + ' ' + application.borrower.lastname];
                        application.jointBorrowerList?.each {
                            data.name << it.firstname + ' ' + it.lastname;
                            data.name2 << it.firstname + ' ' + it.lastname;
                        }
                        data.name = data.name.join(' and ');
                        data.name2 = data.name2.join(' or ');
                        def addr = application.borrower.currentaddress;
                        if( addr ) {
                            data.address = addr.address1 + (addr.address2? ' ' + addr.address2 : '') + 
                                           (addr.city? ' ' + addr.city : '') + 
                                           (addr.zipcode? ' ' + addr.zipcode : '') + 
                                           (addr.province? ' ' + addr.province : '') + 
                                           (addr.country? ' ' + addr.country : '');
                        }
                        else {
                            data.address = '';
                        }
                        
                        data.appno = application.appno;
                        data.contactno = application.borrower.contactno;
                        data.phone = application.borrower.phone;
                        data.amountapproved = application.loaninfo.amountapproved as BigDecimal;       
                        data.interestrate = application.loaninfo.producttype.interestrate as BigDecimal;
                        data.underpaymentpenalty = application.loaninfo.producttype.underpaymentpenalty as BigDecimal;
                        data.pastduerate = application.loaninfo.producttype.pastduerate as BigDecimal;
                        
                        /*
                        boolean print( param ) {
        
                            param.amt_words = NumberToWords.instance.convert(param.amount).toUpperCase() + " pesos and 00/100 only";
                            param.checkdate =  dt_formatter.format( param.checkdate );

                            printFormat = parse(param.format, param);
                            reportModel.viewReport();
                            return ReportUtil.print(reportModel.report, true);
                        }*/
                        
                        if ( data.startDate ==null )
                            data.startDate = '';
                        else
                            //data.startDate = application.ledger.startDate;
                            data.startDate = '';
                            
                        if ( data.maturityDate ==null )    
                            data.maturityDate = '';
                        else
                            //data.maturityDate = application.ledger.maturityDate;
                            data.maturityDate = '';
                        
                        if ( data.dailyPayment ==null )
                            data.dailyPayment = new BigDecimal(0);
                        else   
                            //data.dailyPayment = application.ledger.dailyPayment;
                            data.dailyPayment = new BigDecimal(application.ledger.dailyPayment);
                            
                        data.bankname = application.bankname;
                        data.checkno = application.checkno;
                        
                        data.charges = accts;
                        
                        data.insurance = '';
                        data.notarial = accts.find{ it.title == 'NOTARIAL FEE' }?.amount;
                        data.docstamp = accts.find{ it.title == 'DOCUMENTARY STAMP' }?.amount;
                        data.chatrealreg = accts.find{ it.title == 'CHAT/REAL REGISTRATION' }?.amount;
                        data.affidavit = accts.find{ it.title == 'AFFIDAVIT' }?.amount;
                        //data.totalCharges =  data.notarial + data.docstamp + data.chatrealreg + data.affidavit;
                        
                        return data;
                    },
                    getParameters:{ 
                        return [ 
                            //BRANCH_NAME: OsirisContext.env.CLIENT.name ,
                            PRINTDATE: new Date(), 
                            User: OsirisContext.env.USERINFO.firstname + ' ' + OsirisContext.env.USERINFO.lastname
                        ]
                    }
                ] as ReportModel;
                
                report.viewReport();
            }
        }
        ]]>
    </code>
    <pages>
        <page name="charges" template="loan.assessment.ui.LoanAssessmentPage"/>
        <page name="amountOption" template="loan.assessment.ui.ApprovedAmountPage"/>
        <page name="printPage" template="loan.ui.LoanAppReport"/>
    </pages>
</workunit>