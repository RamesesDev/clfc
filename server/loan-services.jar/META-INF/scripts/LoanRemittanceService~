import com.rameses.annotations.*;


class LoanRemittanceService {

    @PersistenceContext('java:loan')
	def em;

	@Service('LoanPaymentService')
	def paymentSvc;

	@Service('RemittanceService')
	def remittanceSvc;

	@ProxyMethod
	public void remitCollectionSheet( colSheet ) {
		def rmDetails = [];
		colSheet.list.each {
			if( it.amountpaid > 0 ) {
				def param = [
					acceptEvenFullyPaid: true,
					appid: it.appid, appno: it.appno,
					billno: it.billno, date: colSheet.date,
					amount: it.amountpaid, borrower: it.borrower
				];
				def rct = paymentSvc.post( param );
				rmDetails << [objid: rct.objid];
			}
		};

		def remittance = [
			type: 'loan_collection',
			amount: colSheet.total,
			breakdown: colSheet.breakdown,
			details: rmDetails,
			collectionno: colSheet.collectionno,
			collectiondate: colSheet.date,
			collector: colSheet.collector
		];
        
        /***Getting the differences of total amount paid and cash breakdown***/
        def difference = [
            collector: colSheet.collector,
            amount: colSheet.amountDiffer,
            routecode: colSheet.routecode,
            routedescription: colSheet.routedescription,
            arrivaltime: colSheet.arrivaltime,
            reasons: colSheet.reasons
        ];
        /*********************************************************/
        //remittance = remittanceSvc.post( remittance );
		remittance = remittanceSvc.post( remittance, difference );

        //post the difference
		//difference = remittanceSvc.post( difference );

		em.delete("collectionsheet", colSheet);
	}

	@ProxyMethod
	public def post( remittance ) {
		return remittanceSvc.post( remittance );
	}

    @ProxyMethod
	public def save( difference ) {
		return remittanceSvc.post( difference );
	}
	
	@ProxyMethod
	public def buildRemittance( param ) {
		param.collection_type = 'loan_collection';
		return remittanceSvc.buildRemittance( param );
	}

}
