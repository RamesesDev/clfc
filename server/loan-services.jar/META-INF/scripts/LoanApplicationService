import com.rameses.annotations.*;
import com.rameses.invoker.client.*;
import com.rameses.util.*;
import java.sql.Timestamp;

class LoanApplicationService
{
	@PersistenceContext('java:loan')
	def em;

	@Service('Var')
    def vars;
	
	@Env
    def env;

	@Service('DateService')
	def datesvc;

	@Service('LoanFeesRuleService')
	def feesSvc;

	@Service('CheckVoucherService')
	def voucherSvc;

    @Service('LoanDocNoService')
    def docSvc;
    
    @Service('LoanLedgerService')
    def ledgerSvc;
	
	@Service('LoanBorrowerService')    
	def loanBorrowerSvc;

	@Service('ContactService')
	def contactSvc;
	
	@Service('LoanMarketingService')
	def loanMarketingSvc;

	@Service('LoanMarketingIncentiveService')
	def loanMarketingIncentiveSvc;

	@ProxyMethod
	public def save(def newApp) {
		if(!newApp.date)  newApp.dtfiled = datesvc.serverDate;
		if(!newApp.appno) newApp.appno = env.CLIENTCODE + docSvc.getFormattedNextNo('loan_app', '00000000');
		if(!newApp.mode) newApp.mode = 'ONLINE';
		if(!newApp.branchid ) {
			newApp.branchid   = env.CLIENT.id;
			newApp.branchcode = env.CLIENT.code;	
			newApp.branchname = env.CLIENT.name;
		}

		newApp.borrowername = getCustName( newApp.borrower );
		def names = [newApp.borrowername];
		names.addAll( newApp.jointBorrowerList.collect{ getCustName(it) } );
		newApp.fullborrowername = names.join(' and ');
		
		def old = em.read("loanapplication", newApp);
		if( old ) {
			def removed = old.jointBorrowerList - newApp.jointBorrowerList;
			def added = newApp.jointBorrowerList - old.jointBorrowerList;
			removeFromBorrowerIndex( removed, newApp );
			addToBorrowerIndex( added, newApp, 'joint' );
			
			removed = old.coMakerList - newApp.coMakerList;
			added = newApp.coMakerList - old.coMakerList;
			removeFromBorrowerIndex( removed, newApp );
			addToBorrowerIndex( added, newApp, 'co-maker' );
			
			old.putAll( newApp );
			newApp = old;
		}
		else {
			addToBorrowerIndex( [newApp.borrower], newApp, 'principal' );
			addToBorrowerIndex( newApp.jointBorrowerList, newApp, 'joint' );
			addToBorrowerIndex( newApp.coMakerList, newApp, 'co-maker' );
			//addToLoanMarketing( newApp.)
		}
		
		/* Getting  the borrower's years of existence ( B-Day, Residency, Lot Occupancy ) */
		if ( newApp.borrower.birthdate ) newApp.borrower.age = getAge( newApp.borrower.birthdate );
		if ( newApp.borrower.residency.since ) newApp.borrower.residency.resLenOfStay = getAge( newApp.borrower.residency.since );
		if ( newApp.borrower.lotoccupancy.since ) newApp.borrower.lotoccupancy.lotLenOfStay = getAge( newApp.borrower.lotoccupancy.since );

        /* Getting the business years of existence */
  		//if ( newApp.principalMainBusinessList.established ) newApp.principalMainBusinessList.businessYr = getAge( newApp.principalMainBusinessList.established );		
  		
		def relParam=[principal:newApp.borrower.objid]
		if( newApp.spouse ){		
			relParam.relater = newApp.spouse.objid;		
			newApp.spouse.relation = contactSvc.getConnection(relParam).relationship;
		}

		if ( newApp.spouse && newApp.spouse.birthdate ) newApp.spouse.age = getAge( newApp.spouse.birthdate );				
		if ( newApp.spouse && newApp.spouse.residency.since ) newApp.spouse.resLenOfStay = getAge( newApp.spouse.residency.since );	
		if ( newApp.spouse && newApp.spouse.lotoccupancy.since ) newApp.spouse.lotLenOfStay = getAge( newApp.spouse.lotoccupancy.since );	

		def relParam2=[principal:newApp.borrower.objid]
		newApp.jointBorrowerList?.each { jb ->
			if( jb.birthdate ) jb.age = getAge( jb.birthdate );
				relParam.relater = jb.objid;
				jb.relation = contactSvc.getConnection(relParam).relationship;	
			
			if( jb.residency ){
				if( !jb.residency.since ) jb.resLenOfStay = 0;
				else if( jb.residency.since ) jb.resLenOfStay = getAge ( jb.residency.since );

				if( !jb.residency.rentamount ) jb.residency.rentamount = 0.00;
				else if( jb.residency.rentamount !=null) jb.residency.rentamount = new BigDecimal( jb.residency.rentamount );
			}
			
			if( jb.lotoccupancy ){		
				if( !jb.lotoccupancy.since ) jb.resLotLenOfStay = 0;		
				else if( jb.lotoccupancy.since ) jb.lotLenOfStay = getAge ( jb.lotoccupancy.since );

				if( !jb.lotoccupancy.rentamount ) jb.lotoccupancy.rentamount = 0.00;
				else if( jb.lotoccupancy.rentamount !=null) jb.lotoccupancy.rentamount = new BigDecimal( jb.lotoccupancy.rentamount );
			}

			if( jb.spouse && jb.spouse.birthdate ) jb.spouse.age = getAge( jb.spouse.birthdate );

			if( jb.spouse && jb.spouse.birthdate ) jb.spouse.age = getAge( jb.spouse.birthdate );
				//relParam2.relater = jb.spouse.objid;
				//jb.spouse.relation = contactSvc.getconnection(relParam2).relationship;

			if( jb.spouse && jb.spouse.residency.since )    jb.spouse.resLenOfStay = getAge ( jb.spouse.residency.since );
			if( jb.spouse && jb.spouse.lotoccupancy.since ) jb.spouse.lotLenOfStay = getAge ( jb.spouse.lotoccupancy.since );		
		};
		newApp.coMakerList?.each { cm -> 
			if( cm.birthdate ) cm.age = getAge( cm.birthdate );	
				relParam.relater = cm.objid;
				cm.relation = contactSvc.getConnection(relParam).relationship;
	
			if( !cm.residency.since ) cm.resLenOfStay = 0;
				else if( cm.residency.since ) cm.resLenOfStay = getAge ( cm.residency.since );

			if( !cm.residency.rentamount ) cm.residency.rentamount = 0.00;
				else if( cm.residency.rentamount !=null) cm.residency.rentamount = new BigDecimal( cm.residency.rentamount );
				
			if( !cm.lotoccupancy.since ) cm.resLotLenOfStay = 0;		
				else if( cm.lotoccupancy.since ) cm.lotLenOfStay = getAge ( cm.lotoccupancy.since );

			if( !cm.lotoccupancy.rentamount ) cm.lotoccupancy.rentamount = 0.00;
				else if( cm.lotoccupancy.rentamount !=null) cm.lotoccupancy.rentamount = new BigDecimal( cm.lotoccupancy.rentamount );					

			if( cm.spouse && cm.spouse.birthdate ) cm.spouse.age = getAge( cm.spouse.birthdate );
				//relParam2.relater = cm.spouse.objid;
				//cm.spouse.relation = contactSvc.getconnection(relParam2).relationship;

			if( cm.spouse && cm.spouse.residency.since )    cm.spouse.resLenOfStay = getAge ( cm.spouse.residency.since );
			if( cm.spouse && cm.spouse.lotoccupancy.since ) cm.spouse.lotLenOfStay = getAge ( cm.spouse.lotoccupancy.since );
		}

		return em.save("loanapplication", newApp);
	}
	
	private void removeFromBorrowerIndex( list, app ) {
		list.each { cust ->
			em.delete('loan_borrower_index', [custid: cust.objid, appid: app.objid]);
		}
	}
	
	private void addToBorrowerIndex( list, app, borrowertype ) {
		list.each { cust ->
			def data = [
				custid: cust.objid,
				appid:  app.objid,
				contactno: cust.contactno,
				appno:  app.appno,
				name: getCustName( cust ),
				firstname: cust.firstname,
				lastname: cust.lastname,
				middlename: cust.middlename,
				borrowertype: borrowertype
			];
			
			em.save("loan_borrower_index", data);
		};
	}
	
	/******* Saving to Loan Marketing Table  *******/
	private void addToLoanMarketing( list, app, cust ) {
		list.each { emp ->
			def data = [
				objid: emp.objid,
				dtreleased: app.dtreleased,
				marketedby: getEmpName ( emp ),
				marketedbyid: emp.objid,
				appid: app.objid,
				appno:  app.appno,
				borrowername: getCustName( cust )
			];
			
			em.save("loan_marketing_incentive", data);
			
		};
	}
	/*********************************************************************/
	
	//***** Not Included ******//
	/*
	    def remittance = [
			    type: 'loan_collection',
			    amount: colSheet.total,
			    breakdown: colSheet.breakdown,
			    details: rmDetails,
			    collectionno: colSheet.collectionno,
			    collectiondate: colSheet.date,
			    collector: colSheet.collector
		    ];

		    remittance = remittanceSvc.post( remittance );

		    em.delete("collectionsheet", colSheet);
		*/
		/*
			name: getCustName( cust ),
			firstname: cust.firstname,
			lastname: cust.lastname,
			middlename: cust.middlename,
			borrowertype: borrowertype
			
			def voucher = [
		        refid: app.objid,
		        refno: app.appno,
		        reftype: 'loan',
		        payeeid: app.borrower.objid,
		        //payeename: app.fullborrowername,
		        payeename: app.borrowername,
		        currency: 'PHP',
		        particulars: 'Loan',
		        amount: assessment.netAmount,
		        details: details.collect {
			        [acctid: it.objid, acctcode: it.code, accttitle: it.title, amount: it.amount]
		        }
	        ];
	        voucherSvc.post( voucher );
	        
		*/
	//**************************************************************//
	
	/*
	private void removeFromLoanapplicationBranchInbox( list, app ) {
		list.each { cust ->
			em.delete('loan_borrower_index', [custid: cust.objid, appid: app.objid]);
		}
	}
	
	private void addToLoanapplicationBranchInbox( list, app, borrowertype ) {
		list.each { cust ->
			def data = [
				custid: cust.objid,
				appid:  app.objid,
				fullborrowername: cust.fullborrowername,
				downloaddate:  app.downloaddate,
				state: app.state
			];
			
			em.save("loanapplication_branch_inbox", data);
		};
	}
	*/
	
	@ProxyMethod
	public def createRenewal(def o){
		def app=read(o);
		em.save("loanapplication:loanhistory",app)
		removeData(app);
		o.objid=o.tempObjid;
		o.remove("tempObjid");
		o.loancount +=1;
		save(o);
	}
	
	@ProxyMethod
	public def read(def param){
		try{ 	
			def o = em.read("loanapplication",param);

			if( !o ) return null;
			
			if( !o.fullborrowername ) {
				def names = [o.borrowername];
				names.addAll( o.jointBorrowerList.collect{ getCustName(it) } );
				o.fullborrowername = names.join(' and ');
			}

            /* Getting  the borrower's years of existence ( B-Day, Residency, Lot Occupancy ) */
			if ( o.borrower.birthdate ) o.borrower.age = getAge( o.borrower.birthdate );
			
			if ( !o.borrower && !o.borrower.residency.since ) o.borrower.residency.resLenOfStay = 0;
			//if( o.borrower && !o.borrower.residency.since ) o.borrower.residency.resLenOfStay = 0;
			//if( o.borrower && o.borrower.residency.since ) o.borrower.residency.resLenOfStay = getAge( o.borrower.residency.since );
            
            if ( !o.borrower && !o.borrower.lotoccupancy.since ) o.borrower.lotoccupancy.resLenOfStay = 0;	
		   // if ( o.borrower && o.borrower.lotoccupancy.since ) o.borrower.lotoccupancy.lotLenOfStay = getAge( o.borrower.lotoccupancy.since );
		     
     		/* Getting the business years of existence */
 			//if ( o.principalMainBusinessList.established ) o.principalMainBusinessList.businessYr = getAge( o.principalMainBusinessList.established );
 			
			if( o.spouse ){		
				if ( o.spouse && o.spouse.birthdate ) o.spouse.age = getAge( o.spouse.birthdate );
				
				//if ( o.spouse && o.spouse.residency.since ) o.spouse.resLenOfStay = getAge( o.spouse.residency.since );
				//if ( o.spouse && o.spouse.lotoccupancy.since ) o.spouse.lotLenOfStay = getAge( o.spouse.lotoccupancy.since );
				//if ( o.spouse && o.spouse.relation )
					//println o.spouse.name + " " +o.spouse.relation.toLowerCase()+ " of the Principal Borrower" + "(" + o.borrowername + ")";
			}	
			
			def relParam=[principal:o.borrower.objid]
			o.jointBorrowerList?.each { jb ->
				if( jb.birthdate ) jb.age = getAge( jb.birthdate );
				relParam.relater = jb.objid;
				jb.relation = contactSvc.getConnection(relParam).relationship;
				println o.jointBorrowerList.name + " "+ jb.relation +" of the Principal Borrower";
				
				if( !jb.residency.since )jb.resLenOfStay = 0;
				else if( jb.residency.since ) jb.resLenOfStay = getAge ( jb.residency.since );

				//if( !jb.residency.rentamount ) jb.residency.rentamount = 0.00;
				//else if( jb.residency.rentamount !=null) jb.residency.rentamount = new BigDecimal( jb.residency.rentamount );
				
				if( !jb.lotoccupancy.since ) jb.resLotLenOfStay = 0;		
				else if( jb.lotoccupancy.since ) jb.lotLenOfStay = getAge ( jb.lotoccupancy.since );

				if( !jb.lotoccupancy.rentamount ) jb.lotoccupancy.rentamount = 0.00;
				else if( jb.lotoccupancy.rentamount !=null) jb.lotoccupancy.rentamount = new BigDecimal( jb.lotoccupancy.rentamount );

				if( jb.spouse && jb.spouse.birthdate ) jb.spouse.age = getAge( jb.spouse.birthdate );
				
				//relParam.relater = jb.spouse.objid;
				//jb.spouse.relation = contactSvc.getconnection(relParam).relationship;
				//println jb.spouse.name + " "+ jb.spouse.relation + " of the Joint Borrower";
				
				//if( jb.spouse && jb.spouse.residency.since )    jb.spouse.resLenOfStay = getAge ( jb.spouse.residency.since );
				//if( jb.spouse && jb.spouse.lotoccupancy.since ) jb.spouse.lotLenOfStay = getAge ( jb.spouse.lotoccupancy.since );				
			};
			o.coMakerList?.each { cm -> 
				if( cm.birthdate ) cm.age = getAge( cm.birthdate );	
				relParam.relater = cm.objid;
				cm.relation = contactSvc.getConnection(relParam).relationship;
				println o.coMakerList.name + " "+ cm.relation +" of the Principal Borrower";

				if( !cm.residency.since ) cm.resLenOfStay = 0;
				else if( cm.residency.since ) cm.resLenOfStay = getAge ( cm.residency.since );

				if( !cm.residency.rentamount ) cm.residency.rentamount = 0.00;
				else if( cm.residency.rentamount !=null) cm.residency.rentamount = new BigDecimal( cm.residency.rentamount );
				
				if( !cm.lotoccupancy.since ) cm.resLotLenOfStay = 0;		
				else if( cm.lotoccupancy.since ) cm.lotLenOfStay = getAge ( cm.lotoccupancy.since );

				if( !cm.lotoccupancy.rentamount ) cm.lotoccupancy.rentamount = 0.00;
				else if( cm.lotoccupancy.rentamount !=null) cm.lotoccupancy.rentamount = new BigDecimal( cm.lotoccupancy.rentamount );

				if( cm.spouse && cm.spouse.birthdate ) cm.spouse.age = getAge( cm.spouse.birthdate );
				
				//relParam.relater = cm.spouse.objid;
				//cm.spouse.relation = contactSvc.getconnection(relParam).relationship;
				//println cm.spouse.name + " "+ cm.spouse.relation + " of the Co-Maker";

				//if( cm.spouse && cm.spouse.residency.since )    cm.spouse.resLenOfStay = getAge ( cm.spouse.residency.since );
				//if( cm.spouse && cm.spouse.lotoccupancy.since ) cm.spouse.lotLenOfStay = getAge ( cm.spouse.lotoccupancy.since );
			};
		
			return o;

		} catch(e) {
			e.printStackTrace()
			throw e;
		}
	}

	static final def DT_FORMAT = new java.text.SimpleDateFormat("yyyy-MM-dd");
	static final def YEAR_FORMAT = new java.text.SimpleDateFormat("yyyy");
	
	@ProxyMethod
	public def getAge( bdate ){
		if( !bdate ) return null;
		
		def serverdt = datesvc.serverDate;
		def cYear = YEAR_FORMAT.format( serverdt ).toInteger();

		bdate = bdate instanceof Date ? bdate : DT_FORMAT.parse( bdate+"" );
		def pYear = YEAR_FORMAT.format( bdate ).toInteger();

		def a = cYear - pYear;

		return (serverdt.month > bdate.month) || (serverdt.month == bdate.month && serverdt.date >= bdate.date) ?
               a : a-1;
	}

	@ProxyMethod
	public def readByAppNo(def param){
		def o=em.sqlContext.createQuery('SELECT * FROM loanapplication WHERE appno=$P{appno}')
		        .setParameters(param).singleResult;
		        
		if(!o) throw new Exception("Application number not found");
		//if(o.state=="PENDING") throw new Exception("Cannot renew pending application");
		if(o.state=="DISQUALIFIED_OUT") throw new Exception("Sorry this loan application is already disqualified-out");
		if(o.state=="CANCELED_OUT") throw new Exception("Sorry this loan application is already canceled-out");
		if(o.state=="BACK_OUT") throw new Exception("Sorry this loan application is already back-out");
		if(o.state!="CLOSED")  throw new Exception("Sorry this loan application is not yet closed");
		
		return read(o);
	}

	@ProxyMethod
	public def readHistory(def param){
		def o=em.sqlContext.createQuery('SELECT objid FROM loan_history WHERE appno=$P{appno}').setParameters(param).resultList;
		def list=[];
		o.each(){
			list.add(em.read("loanapplication:loanhistory",it));
		}
		return list;
	}

	/*------ loan application actions -----------*/
	@ProxyMethod
	public def returnApp( param ) {
	    def state = getState( param.objid );
	    if( state == 'PENDING' )
	        throw new Exception("Application's state is already PENDING.");
	
		param.state = 'PENDING';
		param.returneddate=datesvc.serverDate;
		return updateFields(param);
	}
	
	public def returnAppForCI( param ) {
	    def state = getState( param.objid );
	    if( state == 'FOR_INSPECTION' )
	        throw new Exception("Application's state is already FOR_INSPECTION.");
	
		param.state = 'FOR_INSPECTION';	
		param.returneddate=datesvc.serverDate;
		return updateFields(param);
	}

	@ProxyMethod
	public def submitForInspection( param ) {
	    def state = getState( param.objid );
	    if( state == 'FOR_INSPECTION' )
	        throw new Exception("Application's state is already FOR_INSPECTION.");
	    
		param.state = 'FOR_INSPECTION';
		param.dtsubmittedforci=datesvc.serverDate;
		return updateFields(param);
	}

	@ProxyMethod
	public def submitForFLA( param ) {
	    def state = getState( param.objid );
	    if( state == 'FOR_FLA' )
	        throw new Exception("Application's state is already FOR_FLA.");
	    
		param.state = 'FOR_FLA';
		param.dtsubmittedforfla=datesvc.serverDate;
		return updateFields(param);
	}
	
	public def returnAppForFLA( param ) {
	    def state = getState( param.objid );
	    if( state == 'FOR_FLA' )
	        throw new Exception("Application's state is already FOR_FLA.");
	
		param.state = 'FOR_FLA';	
		param.dtsubmittedforfla=datesvc.serverDate;
		return updateFields(param);
	}
	
	@ProxyMethod
	public def submitForApproval( param ) {
	    def state = getState( param.objid );
	    if( state == 'FOR_APPROVAL' )
	        throw new Exception("Application's state is already FOR_APPROVAL.");
	
		param.state = 'FOR_APPROVAL';
		param.dtsubmittedforapproval=datesvc.serverDate;
		return updateFields(param);
	}

	@ProxyMethod
	public def approveApp( param ){
		def entity = param.entity;
		//def loanInfo = param.loaninfo;
		//def prodType = loanInfo.producttype;
			
	    def state = getState( entity.objid );
	    if( state == 'APPROVED' )
	        throw new Exception("Application's state is already APPROVED.");
	        
		if( !entity.loaninfo.amountapproved )
			throw new Exception("Amount approved is required.");

		if( entity.loaninfo.amountapproved <= 0 )
			throw new Exception("Amount approved must be greater than zero.");

		entity.state = 'APPROVED';
		entity.approvedate=datesvc.serverDate;
		entity.expirydate=DateUtil.add(entity.approvedate, '30d');
		entity.comments.add([
			author:  env.USER, remarks: param.comment, date: datesvc.serverDate
		]);
		entity = save( entity );
		return entity;
	}
	
   //**********************************************************//
	@ProxyMethod
	public def checkApprovalDate( param ){
	    def entity = param.entity
	   
	    def state = getState( entity.objid );
	    if( state !='APPROVED')
	        throw new Exception("Application's state is not APPROVED.");
	   
	   entity.approvedate = param.approvedate;
	   entity.expirydate = param.expirydate;
	   
	    if( !param.approvedate )
	        throw new Exception("Approved date is invalid.");
	    if( !param.expirydate )    
	        throw new Exception("Expiry date is invlaid.");
	        
	    if( param.approvedate > param.expirydate)
	        throw new Exception("Approval on this account is already expired.")
	}   
	//**********************************************************//
	
	@ProxyMethod
	public def backOutApp( param ) {
	    def state = getState( param.objid );
	    if( state == 'BACK_OUT' )
	        throw new Exception("Application's state is already BACK_OUT.");
		
		param.state = 'BACK_OUT';
		param.backoutdate=datesvc.serverDate;
		return updateFields(param);
	}
	
	@ProxyMethod
	public def submitForRelease( param ) {
		def app = param.application;
		
	    def state = getState( app.objid );
	    if( state == 'FOR_RELEASE' )
	        throw new Exception("Application's state is already FOR_RELEASE.");
		
		def result = updateFields([objid: app.objid, state: 'FOR_RELEASE']);
		app.putAll( result );
		
		def setting = vars.loan_settings;
		if( !setting || !setting.receivable_acct )
			throw new Exception('Loan Receivable account is not yet defined.');
		
		def amount = app.loaninfo.amountapproved;
		def ra = setting.receivable_acct;
		
		def assessment = param.assessment;
		assessment.accounts.add(
			[objid: ra.objid, code: ra.code, title: ra.title, amount: amount]
		);
		
		def details = [];
		details.addAll( assessment.accounts );
		
		if( assessment.otherCharges ) {
			assessment.otherCharges.each { it.chargeType = 'other'; };
			details.addAll( assessment.otherCharges );
		}
		
		app.borrowername = getCustName2( app.borrower );
		def names = [app.borrowername];
		names.addAll( app.jointBorrowerList.collect{ getCustName2(it) } );
		app.fullborrowername = names.join('  or  ');
		
		def voucher = [
			refid: app.objid,
			refno: app.appno,
			reftype: 'loan',
			payeeid: app.borrower.objid,
			payeename: app.fullborrowername,
			currency: 'PHP',
			particulars: 'Loan',
			amount: assessment.netAmount,
			details: details.collect {
				[acctid: it.objid, acctcode: it.code, accttitle: it.title, amount: it.amount]
			}
		];
		voucherSvc.post( voucher );

		return app;
	}
	
	/*
	@ProxyMethod
	public def disqualifyApp( param ) {
	    def state = getState( param.objid );
	    if( state == 'DISQUALIFIED_OUT' )
	        throw new Exception("Application's state is already DISQUALIFIED-OUT.");
	
		param.state = 'DISQUALIFIED_OUT';
		return updateFields(param);
	}
	@ProxyMethod
	public def cancelApp( param ) {
	    def state = getState( param.objid );
	    if( state == 'CANCELED_OUT' )
	        throw new Exception("Application's state is already CANCELED-OUT.");
	
		param.state = 'CANCELED_OUT';
		return updateFields(param);
	}
	*/

    /**
	 * this method releases the application and creates application ledger
	 */
	@ProxyMethod
	public def release( param ) {
		assert param.objid;
		
		//check information
		assert param.acctno;
		assert param.checkno;
		assert param.bankname;
		//assert param.date; (basis for the date released)

		def app = read( param );
		
		if( app.state == 'RELEASED' )
			throw new Exception("Application $app.appno is already released.");
		
		if( app.state != 'FOR_RELEASE' )
			throw new Exception("Application $app.appno is not yet submitted for releasing.");
		
		app.dtreleased = param.date? param.date : datesvc.serverDate;
		app.state = 'RELEASED';
		
		em.sqlContext.createExecutor('update loanapplication set dtreleased=?, state=? where objid=?')
		  .setParameter(1, app.dtreleased)
		  .setParameter(2, app.state)
		  .setParameter(3, app.objid)
		  .execute();
		  
		ledgerSvc.create( app, param );
        
        return app;
	}

	@ProxyMethod
	public def addComment( param ){
		def p = [objid: param.objid, comment: param.comment];
		def app = updateFields( p );
		if( app.comments )
			return app.comments;

		return [];
	}
	@ProxyMethod
	public def saveCiRecommendation( param ){
		def p = [objid: param.objid, cirecommendation: param.recommendation];
		def app = updateFields( p );
		if( app.cirecommendation )
			return app.cirecommendation;

		return  null;
	}
	
	@ProxyMethod
	public def saveCrecomRecommendation( param ){
		def p = [objid: param.objid, crecomrecommendation: param.crecomrecommendation];
		def app = updateFields( p );
		if( app.crecomrecommendation )
			return app.crecomrecommendation;

		return  null;
	}
	
	/*
	@ProxyMethod
	public def saveAnnotation( param ){
		def p = [objid: param.objid, annotation: param.annotation];
		def app = updateFields( p );
		if( app.annotations)
			return app.annotations;

		return  null;
	}
	@ProxyMethod
	public def saveNotes( param ){
		def p = [objid: param.objid, notes: param.notes];
		def app = updateFields( p );
		if( app.notes )
			return app.notes;

		return  null;
	}
	*/
	
	@ProxyMethod
	public def addCollateralComment(def o){
		def dt=datesvc.serverDate;
		return [remarks:o,author:env.USER,date:dt];
	}

	@ProxyMethod
	public void removeData(def o){
		em.delete("loanapplication",o);
	}

	@ProxyMethod
	public def getList(def param){
		def sql;
		if (param.state) sql = 'select * from loanapplication where state=$P{state} order by state,appno ';
		else sql = 'select * from loanapplication order by appno'
		return em.sqlContext.createQuery(sql)
		         .setParameters(param)
		         .setFirstResult(param._start)
		         .setMaxResults(param._limit)
		         .resultList;
	}

	@ProxyMethod
	public void checkBorrower(def param){
		def result = em.sqlContext.createNamedQuery('loan_app:check-borrower').setParameters(param).singleResult;
		if( !result ) {;} //bypass
		else if( result.borrowertype == 'joint' ) 
			throw new Exception("This borrower is a joint borrower of application no. ${result.appno}.");
		
		//else if ( result.borrowertype == 'co-maker' ) 
			//throw new Exception("This borrower is a co-maker of application no. ${result.appno}.");
		
		else if( result.state == 'PENDING') 
			throw new Exception("This borrower has a pending application.");
        else if ( result.state == 'CANCELED_OUT') 
			throw new Exception ("Loan application of this borrower is already canceled.");
		else if( result.state == 'BACK_OUT') 
			throw new Exception ("This borrower had already back-out his/her application.");	
		else if( result.state == 'DISQUALIFIED_OUT') 
			throw new Exception ("This borrower has a disqualified application.");	
		else if ( result.state != 'CLOSED') 
			throw new Exception ("Loan application of this borrower is not yet close.");
	}

    @ProxyMethod
	public def assess( param ) {
		def app = read( param );
		
		def amount = app.loaninfo.amountapproved;

		def p = [:];
		p.amount = amount;
		p.loancount = app.loancount;
		def charges = feesSvc.getFees( p );

		def accts = [];
		accts.addAll(
			charges.collect { [objid: it.acctid, code: it.acctcode, title: it.accttitle, amount: -(it.amount)] }
		);

		charges.each { amount -= it.amount }

		return [netAmount: amount, accounts: accts];
	}

	@ProxyMethod
	public def getEmployeeList(){
		return em.sqlContext.createQuery('select * from loan_marketing_officer').resultList;
	}
	
	@ProxyMethod
	public def getClientTypeList(){
		return em.sqlContext.createQuery('select * from loan_client_type').resultList;
	}
	
	@ProxyMethod
	public def getAppTypeList(){
		return em.sqlContext.createQuery('select * from loan_app_type').resultList;
	}
	
	@ProxyMethod
	public def approveMigratedApplication( param ){
		def state = getState( param.objid );
		
		if( state == 'RELEASED' )
			throw new Exception('Application state is already RELEASED.  Please try reloading the application record.');
	    
		param.state = 'RELEASED';
		return updateFields(param);		
	}
	
	/*========= HELPER METHOD =========*/
	
	private def getCustName( cust ) {
		return cust.lastname + ', ' + cust.firstname + (cust.middlename? ' ' + cust.middlename : '')
	}
	
	private def getCustName2( cust ) { //For Check Printing
		return cust.lastname + ', ' + cust.firstname
	}
	
	private def getEmpName( emp ) {
		return emp.lastname + ', ' + emp.firstname + (emp.middlename? ' ' + emp.middlename : '')
	}
	
	private def getState( objid ) {
	    def app = em.sqlContext.createQuery('select state from loanapplication where objid=?')
	                .setParameter(1, objid).singleResult;

	    return app.state;
	}
	
    private def updateFields( param ) {
		def app = em.sqlContext.createQuery('select objid,appno,comments from loanapplication where objid=?')
		            .setParameter(1, param.objid).singleResult;

		if( !app ) throw new Exception('Application record not found.');

		def sql = new StringBuffer();
		if( param.comment ) {
			def comment = [author:  env.USER, remarks: param.remove('comment'), date: datesvc.serverDate]
			def orig = app.comments[0..-2];
			if( !orig.endsWith(',') && !orig.equals('[') ) orig += ',';
			app.comments = orig + em.serializer.write( comment ) + ',]';
			sql.append('comments=$P{comments}');
		}

		if ( param.cirecommendation ) {
			def ci_recom = [author:  env.USER, remarks: param.remove('cirecommendation'), date: datesvc.serverDate]
			app.cirecommendation = em.serializer.write( ci_recom )
			sql.append('cirecommendation=$P{cirecommendation}');
		}

		if ( param.crecomrecommendation ) {
			def crecom_recom = [author:  env.USER, remarks: param.remove('crecomrecommendation'), date: datesvc.serverDate]
			app.crecomrecommendation = em.serializer.write( crecom_recom )
			sql.append('crecomrecommendation=$P{crecomrecommendation}');
		}

		param.each { k,v ->
			app[k] = v;
			sql.append( (sql.length()>0? ', ' : '') + k + '=$P{' + k + '}');
		}

		if( sql.length() > 0 ) {
			sql.insert(0, 'update loanapplication set ')
			   .append(' where objid=$P{objid}');

			em.sqlContext.createExecutor( sql.toString() ).setParameters( app ).execute();
		}

		if( app.comments )
			app.comments = em.serializer.read( app.comments );
		if( app.translog )
			app.translog = em.serializer.read( app.translog );
		if( app.cirecommendation )
			app.cirecommendation = em.serializer.read( app.cirecommendation );
		if( app.crecomrecommendation )
			app.crecomrecommendation = em.serializer.read( app.crecomrecommendation );
		
		/*
		if ( param.annotation ) {
			def ann = [author:  env.USER, remarks: param.remove('annotation'), date: datesvc.serverDate]
			def orig = app.annotations? app.annotations[0..-2] : '[';
			if( !orig.endsWith(',') && !orig.equals('[') ) orig += ',';
			app.annotations = orig + em.serializer.write( ann ) + ',]';
			sql.append('annotations=$P{annotations}');
		}
		
		if ( param.notes ) {
			def notes = [author:  env.USER, remarks: param.remove('notes'), date: datesvc.serverDate]
			app.notes = em.serializer.write( notes )
			sql.append('notes=$P{notes}');
		}
		
		if( app.annotations )
			app.annotations = em.serializer.read( app.annotations );	
		if( app.notes )
			app.notes = em.serializer.read( app.notes );	
        */ 

		return app;
	}
}
