import com.rameses.annotations.*;
import com.rameses.invoker.client.*;
import com.rameses.util.*;
import java.sql.Timestamp;


class LoanLedgerService
{

	@PersistenceContext('java:loan')
	def em;

	
	/**
	 * computation formulas:
	 *   daily due:        ((principal * interest * (term/30)) + principal) / term
	 *   total interest:   principal * interest * (term / 30)
	 *   daily interest:   principal * interest / 30
	 */
	@ProxyMethod
	public void create( app, options ) {
		try {
			def loanInfo = app.loaninfo;
			def prodType = loanInfo.producttype;

			if( prodType.code != 'DAILY' ) throw new Exception("Product Type $prodType.code is not yet supported.");

			def dtreleased = parseDate( app.dtreleased );
			def start_date = DateUtil.add(dtreleased, '1d');
			def principal = loanInfo.amountapproved;
			def int_rate = fixDecimal( prodType.interestrate / 100, '0.0000' );

			def ledger = [
				loanAmount:        principal,
				principalBalance:  principal,
				dtcreated:         app.dtreleased,
				startDate:         start_date,
				maturityDate:      DateUtil.add(dtreleased, prodType.term + 'd'),
				nextBillDate:      start_date,
				lastDatePaid:	   null,
				
				dailyPayment:      fixDecimal( ((principal * int_rate * (prodType.term/30)) + principal) / prodType.term ),
				dailyInt:          roundDecimal( fixDecimal( principal * int_rate / 30 ) ),
				dailyPastdue:       0.00,

				productType:       prodType.code,
				term:              prodType.term,
				interestrate:      int_rate,
				absentrate:        fixDecimal( prodType.absentpenalty/100, '0.0000' ),
				underpaymentrate:  fixDecimal( prodType.underpaymentpenalty/100, '0.0000' ),
				pastduerate :      fixDecimal( prodType.pastduerate/100, '0.0000' ),
				
				fullyPaidAmt:      0.00, //last payment that fully pays the total balance
				dateFullyPaid:     null,
				totalPaid:         0.00,
				totalPrincipalPaid:0.00,
				totalInterestPaid: 0.00,
				totalPenaltyPaid:  0.00,
				
				totalPenalty:      0.00,
				totalPenalty_wcup: 0.00, // w/ cover-up (absent_penalty)
				totalPenalty_wocup:0.00, // w/o cover-up (absent_penalty + underpayment_penalty)
				totalAbsent:       0,
				totalUnderpayment: 0,
			];
			
			ledger.checkInfo = [:];		
			if( options.acctno )    ledger.checkInfo.acctno = options.acctno;
			if( options.bankname )  ledger.checkInfo.bankname = options.bankname;
			if( options.checkno )   ledger.checkno = options.checkno;
			
			ledger.mode = 'regular'; //other possible values could be over or fixed
			if( options.overpaymentAmt ) ledger.overpaymentAmt = options.overpaymentAmt;

			em.sqlContext.createExecutor('update loanapplication set ledger=? where objid=?')
			  .setParameter(1, em.serializer.write( ledger ) )
			  .setParameter(2, app.objid)
			  .execute();
		}
		catch(e) {
			e.printStackTrace();
			throw e;
		}        
	}
	
	
	/**
	 * @param [objid: <app_id>]
	 * @return application ledger
	 */
	@ProxyMethod
	public def read( param ) {
		assert param.objid;

		try {
			def app = em.sqlContext.createQuery('select ledger from loanapplication where objid=?')
						.setParameter(1, param.objid).singleResult;

			if( !app ) throw new Exception("No loan application record found.");
			if( !app.ledger ) throw new Exception("Application $app.appno has no ledger.");
			
			def ledger = em.serializer.read( app.ledger );			
			ledger.loanBalance = computeLoanBalance( ledger );

			return ledger;
		}
		catch(e) {
			e.printStackTrace();
			throw e;
		}
	}
	
	@ProxyMethod
	public def computeLoanBalance( ledger ) 
	{
		def md = parseDate(ledger.maturityDate);
		def dg = parseDate(ledger.dtcreated);
		def ld;
		if( ledger.lastDatePaid ) {
			ld = parseDate(ledger.lastDatePaid);
		}
		else {
			ld = dg;
		}
		
		if( ledger.mode == 'over' )
		{
			return (ledger.term - DateUtil.diff(dg,ld)) * ledger.dailyInt + ledger.principalBalance;
		}
		if( ledger.mode == 'fixed' ) {
			return ledger.principalBalance + ledger.waivedIntBalance;
		}
		
		//regular
		return (ledger.term - DateUtil.diff(dg,ld)) * ledger.dailyInt + ledger.principalBalance;
	}

	/**
	 * @param [objid: <app_id>, ledger: <map>]
	 * @return application ledger
	 */
	@ProxyMethod
	public def update( param ) {
		assert param.objid;
		assert param.ledger;

		def ledger = read( param );
		ledger.putAll( param.ledger );
		
		param.ledger = em.serializer.write( ledger );
		def sql = new StringBuffer('update loanapplication set ledger=$P{ledger}');
		if( ledger.principalBalance <= 0.00 ) {
			sql.append(', state=$P{state}');
			param.state = 'CLOSED';
		}
		sql.append(' where objid=$P{objid}');

		em.sqlContext.createExecutor( sql.toString() )
		  .setParameters( param )
		  .execute();

		return ledger;
	}
	
	@ProxyMethod
	public def waive( waiver ) {
		assert waiver.appid;
		assert waiver.date;
		assert waiver.dtapproved;
		assert waiver.amount;
		
		def ledger = read([objid: waiver.appid]);
		if( ledger.version == null ) ledger.version = 1;
		
		def history = [
			objid: "LL" + new java.rmi.server.UID(),
			appid: waiver.appid,
			version: ledger.version,
			info: ledger
		];
		em.create('loan_ledger_amended', history);
		
		ledger.version++;
		ledger.mode = 'fixed';
		ledger.waivedAmount = waiver.amount;
		ledger.waivedInt = ledger.waivedAmount - ledger.principalBalance;
		ledger.waivedIntBalance = ledger.waivedInt;
		ledger.waiver = waiver;
		
		//reset next bill date, this is no longer needed
		ledger.nextBillDate = null;
		
		ledger = update([objid: waiver.appid, ledger: ledger]);
		
		//remove items greater than the lastDatePaid
		em.sqlContext.createExecutor('delete from loan_ledger_item where appid=? and date>?')
		  .setParameter(1, waiver.appid)
		  .setParameter(2, ledger.lastDatePaid)
		  .execute();
		  
		return ledger;
	}
	
	@ProxyMethod
	public def readDetail( param ) {
		assert param.objid;
		assert param.date;
		
		return em.read('loanapplication:ledger_item', [appid: param.objid, date: param.date]);
	}
	
	@ProxyMethod
	public def createDetail( param ) {
		return em.create("loanapplication:ledger_item", param);
	}
	
	@ProxyMethod
	public def updateDetail( param ) {
		return em.update("loanapplication:ledger_item", param);
	}

	/**
	 * @return LegderDetails
	 */
	@ProxyMethod
	public def getDetails( param ) {
		assert param.objid;

		if( !param.dateto ) {
			def ledger = read( param );
			if( ledger.lastDatePaid ) param.dateto = ledger.lastDatePaid
		}
		
		def ql = ['select * from loan_ledger_item where appid=$P{objid}'];
		if( param.datefrom ) ql << 'date >= $P{datefrom}';
		if( param.dateto   ) ql << 'date <= $P{dateto}';
		
		ql = ql.join(' and ') + ' order by date ';

		def qry = em.sqlContext.createQuery(ql).setParameters(param);
		
		if( param._start ) qry.setFirstResult( param._start );
		if( param._limit ) qry.setMaxResults( param._limit ); 
		
		return qry.resultList.each {
			it.penalty = 0.00;

			if( !it.absent_penalty ) it.absent_penalty = 0.00;
			if( !it.underpayment_penalty ) it.underpayment_penalty = 0.00;
			if( !it.pastdue ) it.pastdue = 0.00;

			it.penalty += it.absent_penalty;
			it.penalty += it.underpayment_penalty;
			it.penalty += it.pastdue;
		};
	}
	
	@ProxyMethod
	public def updateDetails( param ) {
		assert param.appid;
		assert param.details;
				
		return param.details.each {
			if( !it.appid ) {
				it.appid = param.appid;
				createDetail( it );
			}
			else {
				updateDetail( it );
			}
		};
	}
	
	
	/****************************************************************
	 *	helper methods
	 ****************************************************************/	 	
	private def parseDate( date ) {
		if( date instanceof Date ) return date;
		return Timestamp.valueOf( date + (date.length()>10? '' : ' 00:00:00') );
	}
	
	private def roundDecimal( amount ) {
		def dec = amount - (int) amount;
		def offset = dec - fixDecimal(dec, '0.0')
		return amount + ((offset>0)? 0.05 - offset : -(offset));
	}
	
	private def fixDecimal( amount, format='##0.00' ) {
		return NumberUtil.formatDecimal(amount, format);
	}

}
